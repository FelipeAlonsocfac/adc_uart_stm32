
sati_adc_prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000070  080053a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  080053a0  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c29  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b4  00000000  00000000  00031cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e4d  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2e9  00000000  00000000  0005fef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001023fe  00000000  00000000  0006e1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001705dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  00170658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080052ac 	.word	0x080052ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080052ac 	.word	0x080052ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_ADC1_Init+0x98>)
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <MX_ADC1_Init+0x9c>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x98>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0x98>)
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <MX_ADC1_Init+0xa0>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x98>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x98>)
 8000652:	f000 fd17 	bl	8001084 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 face 	bl	8000bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000660:	2303      	movs	r3, #3
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x98>)
 8000672:	f000 feb1 	bl	80013d8 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 fabe 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x74>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d123      	bne.n	80006fe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_ADC_MspInit+0x78>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 80006e6:	2308      	movs	r3, #8
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ea:	2303      	movs	r3, #3
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <HAL_ADC_MspInit+0x7c>)
 80006fa:	f001 fe03 	bl	8002304 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40012000 	.word	0x40012000
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000

08000714 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ETH_Init+0x88>)
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MX_ETH_Init+0x8c>)
 800071c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_ETH_Init+0x88>)
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ETH_Init+0x88>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ETH_Init+0x88>)
 800072e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000732:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ETH_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ETH_Init+0x88>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ETH_Init+0x88>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ETH_Init+0x88>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	3302      	adds	r3, #2
 8000752:	22e1      	movs	r2, #225	; 0xe1
 8000754:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_ETH_Init+0x88>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	3303      	adds	r3, #3
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_ETH_Init+0x88>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	3304      	adds	r3, #4
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_ETH_Init+0x88>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	3305      	adds	r3, #5
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_ETH_Init+0x88>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_ETH_Init+0x88>)
 8000782:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000786:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_ETH_Init+0x88>)
 800078a:	f001 f94f 	bl	8001a2c <HAL_ETH_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000794:	f000 fa32 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000e0 	.word	0x200000e0
 80007a0:	40028000 	.word	0x40028000

080007a4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	; 0x38
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a4e      	ldr	r2, [pc, #312]	; (80008fc <HAL_ETH_MspInit+0x158>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	f040 8096 	bne.w	80008f4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a4c      	ldr	r2, [pc, #304]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30
 80007d4:	4b4a      	ldr	r3, [pc, #296]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007dc:	623b      	str	r3, [r7, #32]
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	4b47      	ldr	r3, [pc, #284]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a46      	ldr	r2, [pc, #280]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
 80007ec:	4b44      	ldr	r3, [pc, #272]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	4b41      	ldr	r3, [pc, #260]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a40      	ldr	r2, [pc, #256]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 80007fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
 8000804:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
 800081c:	4b38      	ldr	r3, [pc, #224]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b35      	ldr	r3, [pc, #212]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	4a34      	ldr	r2, [pc, #208]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6313      	str	r3, [r2, #48]	; 0x30
 8000834:	4b32      	ldr	r3, [pc, #200]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <HAL_ETH_MspInit+0x15c>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000880:	230b      	movs	r3, #11
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <HAL_ETH_MspInit+0x160>)
 800088c:	f001 fd3a 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000890:	2386      	movs	r3, #134	; 0x86
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a0:	230b      	movs	r3, #11
 80008a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4817      	ldr	r0, [pc, #92]	; (8000908 <HAL_ETH_MspInit+0x164>)
 80008ac:	f001 fd2a 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c2:	230b      	movs	r3, #11
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <HAL_ETH_MspInit+0x168>)
 80008ce:	f001 fd19 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <HAL_ETH_MspInit+0x16c>)
 80008f0:	f001 fd08 	bl	8002304 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	; 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40028000 	.word	0x40028000
 8000900:	40023800 	.word	0x40023800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800

08000914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x130>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a45      	ldr	r2, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x130>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x130>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c2:	f001 fe49 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x138>)
 80009cc:	f001 fe44 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_GPIO_Init+0x13c>)
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x140>)
 80009e6:	f001 fc8d 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000a04:	f001 fc7e 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a20:	f001 fc70 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a38:	f001 fc64 	bl	8002304 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	10110000 	.word	0x10110000
 8000a54:	40020800 	.word	0x40020800

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	; 0x30
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f000 fa92 	bl	8000f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f835 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f7ff ff55 	bl	8000914 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a6a:	f7ff fe53 	bl	8000714 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a6e:	f000 f963 	bl	8000d38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a72:	f000 f9d5 	bl	8000e20 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a76:	f7ff fdbb 	bl	80005f0 <MX_ADC1_Init>
  {
	  //Set GPIO pin high
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);

	  //Get ADC value
	  HAL_ADC_Start(&hadc1);
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <main+0x6c>)
 8000a7c:	f000 fb46 	bl	800110c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <main+0x6c>)
 8000a86:	f000 fc0f 	bl	80012a8 <HAL_ADC_PollForConversion>
	  POT = HAL_ADC_GetValue(&hadc1);
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <main+0x6c>)
 8000a8c:	f000 fc97 	bl	80013be <HAL_ADC_GetValue>
 8000a90:	4603      	mov	r3, r0
 8000a92:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  //Set GPIO pin low
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);

	  //Convert to string and print
	  sprintf(msg,"VALOR: %hu\r\n",POT);
 8000a94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a96:	463b      	mov	r3, r7
 8000a98:	490b      	ldr	r1, [pc, #44]	; (8000ac8 <main+0x70>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 f800 	bl	8004aa0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbcc 	bl	8000240 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	4639      	mov	r1, r7
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <main+0x74>)
 8000ab4:	f003 f8ae 	bl	8003c14 <HAL_UART_Transmit>


	  HAL_Delay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f000 fac0 	bl	8001040 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000ac0:	e7db      	b.n	8000a7a <main+0x22>
 8000ac2:	bf00      	nop
 8000ac4:	20000098 	.word	0x20000098
 8000ac8:	080052c4 	.word	0x080052c4
 8000acc:	20000128 	.word	0x20000128

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b0b8      	sub	sp, #224	; 0xe0
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ada:	2234      	movs	r2, #52	; 0x34
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 ffd6 	bl	8004a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2290      	movs	r2, #144	; 0x90
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 ffc7 	bl	8004a90 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b02:	f001 ff0b 	bl	800291c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <SystemClock_Config+0x120>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a39      	ldr	r2, [pc, #228]	; (8000bf0 <SystemClock_Config+0x120>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <SystemClock_Config+0x120>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b26:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <SystemClock_Config+0x124>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 ff32 	bl	80029dc <HAL_RCC_OscConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b7e:	f000 f83d 	bl	8000bfc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b82:	f001 fedb 	bl	800293c <HAL_PWREx_EnableOverDrive>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b8c:	f000 f836 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 f9be 	bl	8002f38 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000bc2:	f000 f81b 	bl	8000bfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <SystemClock_Config+0x128>)
 8000bc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fba5 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000be4:	f000 f80a 	bl	8000bfc <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	37e0      	adds	r7, #224	; 0xe0
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	00200100 	.word	0x00200100

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f9ae 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f003 feb0 	bl	8004a3c <__errno>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	230c      	movs	r3, #12
 8000ce0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20080000 	.word	0x20080000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	2000008c 	.word	0x2000008c
 8000d10:	200005b8 	.word	0x200005b8

08000d14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_USART3_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d7c:	f002 fefc 	bl	8003b78 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f7ff ff39 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000128 	.word	0x20000128
 8000d94:	40004800 	.word	0x40004800

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x7c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d128      	bne.n	8000e0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000dd8:	f043 0308 	orr.w	r3, r3, #8
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_UART_MspInit+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_UART_MspInit+0x84>)
 8000e08:	f001 fa7c 	bl	8002304 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40004800 	.word	0x40004800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2206      	movs	r2, #6
 8000e30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	f001 fc11 	bl	800268a <HAL_PCD_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e6e:	f7ff fec5 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001ac 	.word	0x200001ac

08000e7c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9c:	d141      	bne.n	8000f22 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_PCD_MspInit+0xb4>)
 8000ed4:	f001 fa16 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <HAL_PCD_MspInit+0xb4>)
 8000eee:	f001 fa09 	bl	8002304 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6353      	str	r3, [r2, #52]	; 0x34
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_PCD_MspInit+0xb0>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff fed9 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 fd71 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fd77 	bl	8000a58 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f78:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 8000f7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f80:	200005b8 	.word	0x200005b8

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>

08000f86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 fd1a 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 f805 	bl	8000fa0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f96:	f7ff fe39 	bl	8000c0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fd27 	bl	8001a12 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 fcfd 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	200005b0 	.word	0x200005b0

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200005b0 	.word	0x200005b0

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e031      	b.n	80010fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff faf6 	bl	8000694 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_ADC_Init+0x84>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	f043 0202 	orr.w	r2, r3, #2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 faca 	bl	800166c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	; 0x40
 80010ee:	e001      	b.n	80010f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	ffffeefd 	.word	0xffffeefd

0800110c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start+0x1a>
 8001122:	2302      	movs	r3, #2
 8001124:	e0ad      	b.n	8001282 <HAL_ADC_Start+0x176>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d018      	beq.n	800116e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <HAL_ADC_Start+0x184>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_ADC_Start+0x188>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001160:	e002      	b.n	8001168 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3b01      	subs	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d175      	bne.n	8001268 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001180:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_ADC_Start+0x18c>)
 8001182:	4013      	ands	r3, r2
 8001184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b6:	d106      	bne.n	80011c6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f023 0206 	bic.w	r2, r3, #6
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_ADC_Start+0x190>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d143      	bne.n	8001280 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	e03a      	b.n	8001280 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_ADC_Start+0x194>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d10e      	bne.n	8001232 <HAL_ADC_Start+0x126>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001230:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_ADC_Start+0x190>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d120      	bne.n	8001280 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <HAL_ADC_Start+0x198>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d11b      	bne.n	8001280 <HAL_ADC_Start+0x174>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d114      	bne.n	8001280 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	e00b      	b.n	8001280 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f043 0210 	orr.w	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	431bde83 	.word	0x431bde83
 8001298:	fffff8fe 	.word	0xfffff8fe
 800129c:	40012300 	.word	0x40012300
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40012200 	.word	0x40012200

080012a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c4:	d113      	bne.n	80012ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d4:	d10b      	bne.n	80012ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e063      	b.n	80013b6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012ee:	f7ff fe9b 	bl	8001028 <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012f4:	e021      	b.n	800133a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d01d      	beq.n	800133a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_ADC_PollForConversion+0x6c>
 8001304:	f7ff fe90 	bl	8001028 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d212      	bcs.n	800133a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d00b      	beq.n	800133a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f043 0204 	orr.w	r2, r3, #4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e03d      	b.n	80013b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b02      	cmp	r3, #2
 8001346:	d1d6      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f06f 0212 	mvn.w	r2, #18
 8001350:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d123      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001370:	2b00      	cmp	r3, #0
 8001372:	d11f      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800138c:	2b00      	cmp	r3, #0
 800138e:	d111      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f043 0201 	orr.w	r2, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1c>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e12a      	b.n	800164a <HAL_ADC_ConfigChannel+0x272>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b09      	cmp	r3, #9
 8001402:	d93a      	bls.n	800147a <HAL_ADC_ConfigChannel+0xa2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800140c:	d035      	beq.n	800147a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	3b1e      	subs	r3, #30
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_ADC_ConfigChannel+0x280>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10a      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68d9      	ldr	r1, [r3, #12]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	061a      	lsls	r2, r3, #24
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001452:	e035      	b.n	80014c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4403      	add	r3, r0
 800146c:	3b1e      	subs	r3, #30
 800146e:	409a      	lsls	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001478:	e022      	b.n	80014c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6919      	ldr	r1, [r3, #16]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	2207      	movs	r2, #7
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43da      	mvns	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	400a      	ands	r2, r1
 800149c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6919      	ldr	r1, [r3, #16]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4403      	add	r3, r0
 80014b6:	409a      	lsls	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b05      	subs	r3, #5
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
 8001510:	e04c      	b.n	80015ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b0c      	cmp	r3, #12
 8001518:	d824      	bhi.n	8001564 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b23      	subs	r3, #35	; 0x23
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	; 0x23
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
 8001562:	e023      	b.n	80015ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3b41      	subs	r3, #65	; 0x41
 8001576:	221f      	movs	r2, #31
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	400a      	ands	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	; 0x41
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a2a      	ldr	r2, [pc, #168]	; (800165c <HAL_ADC_ConfigChannel+0x284>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10a      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1f4>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015be:	d105      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 80015c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_ADC_ConfigChannel+0x284>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x212>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d105      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_ADC_ConfigChannel+0x284>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d125      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x268>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_ADC_ConfigChannel+0x280>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_ConfigChannel+0x22e>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b11      	cmp	r3, #17
 8001604:	d11c      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <HAL_ADC_ConfigChannel+0x288>)
 800160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001610:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_ADC_ConfigChannel+0x280>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d111      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_ADC_ConfigChannel+0x28c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_ADC_ConfigChannel+0x290>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001632:	e002      	b.n	800163a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	10000012 	.word	0x10000012
 800165c:	40012000 	.word	0x40012000
 8001660:	40012300 	.word	0x40012300
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001674:	4b78      	ldr	r3, [pc, #480]	; (8001858 <ADC_Init+0x1ec>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a77      	ldr	r2, [pc, #476]	; (8001858 <ADC_Init+0x1ec>)
 800167a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800167e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001680:	4b75      	ldr	r3, [pc, #468]	; (8001858 <ADC_Init+0x1ec>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4973      	ldr	r1, [pc, #460]	; (8001858 <ADC_Init+0x1ec>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800169c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	021a      	lsls	r2, r3, #8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6899      	ldr	r1, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	4a58      	ldr	r2, [pc, #352]	; (800185c <ADC_Init+0x1f0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6899      	ldr	r1, [r3, #8]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	e00f      	b.n	8001766 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001764:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0202 	bic.w	r2, r2, #2
 8001774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	005a      	lsls	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	3b01      	subs	r3, #1
 80017c0:	035a      	lsls	r2, r3, #13
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	e007      	b.n	80017dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	051a      	lsls	r2, r3, #20
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181e:	025a      	lsls	r2, r3, #9
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6899      	ldr	r1, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	029a      	lsls	r2, r3, #10
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40012300 	.word	0x40012300
 800185c:	0f000001 	.word	0x0f000001

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	4313      	orrs	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	05fa0000 	.word	0x05fa0000

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff47 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff5c 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb0 	bl	8001980 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001a3c:	4ba9      	ldr	r3, [pc, #676]	; (8001ce4 <HAL_ETH_Init+0x2b8>)
 8001a3e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e183      	b.n	8001d5a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fe9c 	bl	80007a4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ce8 <HAL_ETH_Init+0x2bc>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	4a9d      	ldr	r2, [pc, #628]	; (8001ce8 <HAL_ETH_Init+0x2bc>)
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a76:	6453      	str	r3, [r2, #68]	; 0x44
 8001a78:	4b9b      	ldr	r3, [pc, #620]	; (8001ce8 <HAL_ETH_Init+0x2bc>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_ETH_Init+0x2c0>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a98      	ldr	r2, [pc, #608]	; (8001cec <HAL_ETH_Init+0x2c0>)
 8001a8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a8e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a90:	4b96      	ldr	r3, [pc, #600]	; (8001cec <HAL_ETH_Init+0x2c0>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4994      	ldr	r1, [pc, #592]	; (8001cec <HAL_ETH_Init+0x2c0>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab6:	f7ff fab7 	bl	8001028 <HAL_GetTick>
 8001aba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001abc:	e011      	b.n	8001ae2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001abe:	f7ff fab3 	bl	8001028 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001acc:	d909      	bls.n	8001ae2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e13b      	b.n	8001d5a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e4      	bne.n	8001abe <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f023 031c 	bic.w	r3, r3, #28
 8001b02:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b04:	f001 fbdc 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8001b08:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4a78      	ldr	r2, [pc, #480]	; (8001cf0 <HAL_ETH_Init+0x2c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d908      	bls.n	8001b24 <HAL_ETH_Init+0xf8>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_ETH_Init+0x2c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d804      	bhi.n	8001b24 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e027      	b.n	8001b74 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4a73      	ldr	r2, [pc, #460]	; (8001cf4 <HAL_ETH_Init+0x2c8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d908      	bls.n	8001b3e <HAL_ETH_Init+0x112>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_ETH_Init+0x2cc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d804      	bhi.n	8001b3e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f043 030c 	orr.w	r3, r3, #12
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	e01a      	b.n	8001b74 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4a6d      	ldr	r2, [pc, #436]	; (8001cf8 <HAL_ETH_Init+0x2cc>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d903      	bls.n	8001b4e <HAL_ETH_Init+0x122>
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_ETH_Init+0x2d0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d911      	bls.n	8001b72 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_ETH_Init+0x2d0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d908      	bls.n	8001b68 <HAL_ETH_Init+0x13c>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4a69      	ldr	r2, [pc, #420]	; (8001d00 <HAL_ETH_Init+0x2d4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d804      	bhi.n	8001b68 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e005      	b.n	8001b74 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e000      	b.n	8001b74 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b72:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f956 	bl	8001e34 <HAL_ETH_WritePHYRegister>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b92:	6939      	ldr	r1, [r7, #16]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f9b3 	bl	8001f00 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0d9      	b.n	8001d5a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ba6:	20ff      	movs	r0, #255	; 0xff
 8001ba8:	f7ff fa4a 	bl	8001040 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80a7 	beq.w	8001d04 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fa37 	bl	8001028 <HAL_GetTick>
 8001bba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8cd 	bl	8001d64 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001bca:	f7ff fa2d 	bl	8001028 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d90f      	bls.n	8001bfc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f98c 	bl	8001f00 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0ae      	b.n	8001d5a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0da      	beq.n	8001bbc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f911 	bl	8001e34 <HAL_ETH_WritePHYRegister>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c1c:	6939      	ldr	r1, [r7, #16]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f96e 	bl	8001f00 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e094      	b.n	8001d5a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f9fa 	bl	8001028 <HAL_GetTick>
 8001c34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f890 	bl	8001d64 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c44:	f7ff f9f0 	bl	8001028 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d90f      	bls.n	8001c76 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c5a:	6939      	ldr	r1, [r7, #16]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f94f 	bl	8001f00 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e071      	b.n	8001d5a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0da      	beq.n	8001c36 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	461a      	mov	r2, r3
 8001c86:	2110      	movs	r1, #16
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f86b 	bl	8001d64 <HAL_ETH_ReadPHYRegister>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c98:	6939      	ldr	r1, [r7, #16]
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f930 	bl	8001f00 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e056      	b.n	8001d5a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	e002      	b.n	8001cc6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	e037      	b.n	8001d48 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e032      	b.n	8001d48 <HAL_ETH_Init+0x31c>
 8001ce2:	bf00      	nop
 8001ce4:	03938700 	.word	0x03938700
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	01312cff 	.word	0x01312cff
 8001cf4:	02160ebf 	.word	0x02160ebf
 8001cf8:	039386ff 	.word	0x039386ff
 8001cfc:	05f5e0ff 	.word	0x05f5e0ff
 8001d00:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f889 	bl	8001e34 <HAL_ETH_WritePHYRegister>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8e6 	bl	8001f00 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e00c      	b.n	8001d5a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d40:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d44:	f7ff f97c 	bl	8001040 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d48:	6939      	ldr	r1, [r7, #16]
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8d8 	bl	8001f00 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop

08001d64 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b82      	cmp	r3, #130	; 0x82
 8001d84:	d101      	bne.n	8001d8a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
 8001d88:	e050      	b.n	8001e2c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2282      	movs	r2, #130	; 0x82
 8001d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 031c 	and.w	r3, r3, #28
 8001da0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8a1b      	ldrh	r3, [r3, #16]
 8001da6:	02db      	lsls	r3, r3, #11
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001db0:	897b      	ldrh	r3, [r7, #10]
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f023 0302 	bic.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd6:	f7ff f927 	bl	8001028 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ddc:	e015      	b.n	8001e0a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dde:	f7ff f923 	bl	8001028 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d309      	bcc.n	8001e02 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e014      	b.n	8001e2c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e4      	bne.n	8001dde <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b42      	cmp	r3, #66	; 0x42
 8001e54:	d101      	bne.n	8001e5a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	e04e      	b.n	8001ef8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2242      	movs	r2, #66	; 0x42
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 031c 	and.w	r3, r3, #28
 8001e70:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8a1b      	ldrh	r3, [r3, #16]
 8001e76:	02db      	lsls	r3, r3, #11
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	019b      	lsls	r3, r3, #6
 8001e84:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb0:	f7ff f8ba 	bl	8001028 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eb6:	e015      	b.n	8001ee4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001eb8:	f7ff f8b6 	bl	8001028 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d309      	bcc.n	8001edc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e00d      	b.n	8001ef8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e4      	bne.n	8001eb8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0b0      	sub	sp, #192	; 0xc0
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f24:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8001f4c:	e001      	b.n	8001f52 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f56:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001fd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd8:	4bab      	ldr	r3, [pc, #684]	; (8002288 <ETH_MACDMAConfig+0x388>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fe4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fe8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fec:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001ff2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ff6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ffa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002000:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002004:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002008:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800200a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800200c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002010:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002014:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002016:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002028:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff f803 	bl	8001040 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002044:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002048:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800204a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800204c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800204e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002052:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002058:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800205a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800205e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002064:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002068:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002070:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002072:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe ffde 	bl	8001040 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002096:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020a0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020b4:	4013      	ands	r3, r2
 80020b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020be:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020c4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020ca:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020d0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020d6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020dc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7fe ff9f 	bl	8001040 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800210c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002110:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002126:	2001      	movs	r0, #1
 8002128:	f7fe ff8a 	bl	8001040 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002134:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800213a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002144:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002148:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800215a:	2304      	movs	r3, #4
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800216a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800217e:	2300      	movs	r3, #0
 8002180:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f241 0318 	movw	r3, #4120	; 0x1018
 800218a:	4413      	add	r3, r2
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002192:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <ETH_MACDMAConfig+0x38c>)
 8002198:	4013      	ands	r3, r2
 800219a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800219e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021a0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021a2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021a4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021a6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021a8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021aa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021ac:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021ae:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021b0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021b2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021b4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021b6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021ba:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021be:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d2:	4413      	add	r3, r2
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f241 0318 	movw	r3, #4120	; 0x1018
 80021e2:	4413      	add	r3, r2
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7fe ff28 	bl	8001040 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021f8:	4413      	add	r3, r2
 80021fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021fe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002204:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002208:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800220c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800220e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002210:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002214:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002216:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800221a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002238:	2001      	movs	r0, #1
 800223a:	f7fe ff01 	bl	8001040 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10d      	bne.n	8002270 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f241 031c 	movw	r3, #4124	; 0x101c
 800225c:	4413      	add	r3, r2
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <ETH_MACDMAConfig+0x390>)
 8002266:	431a      	orrs	r2, r3
 8002268:	f241 031c 	movw	r3, #4124	; 0x101c
 800226c:	440b      	add	r3, r1
 800226e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	461a      	mov	r2, r3
 8002276:	2100      	movs	r1, #0
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f80b 	bl	8002294 <ETH_MACAddressConfig>
}
 800227e:	bf00      	nop
 8002280:	37c0      	adds	r7, #192	; 0xc0
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	ff20810f 	.word	0xff20810f
 800228c:	f8de3f23 	.word	0xf8de3f23
 8002290:	00010040 	.word	0x00010040

08002294 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3305      	adds	r3, #5
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	3204      	adds	r2, #4
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <ETH_MACAddressConfig+0x68>)
 80022b6:	4413      	add	r3, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3303      	adds	r3, #3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	061a      	lsls	r2, r3, #24
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3302      	adds	r3, #2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3301      	adds	r3, #1
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4313      	orrs	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <ETH_MACAddressConfig+0x6c>)
 80022e6:	4413      	add	r3, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	6013      	str	r3, [r2, #0]
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40028040 	.word	0x40028040
 8002300:	40028044 	.word	0x40028044

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e175      	b.n	8002610 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8164 	bne.w	800260a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d00b      	beq.n	8002362 <HAL_GPIO_Init+0x5e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002356:	2b11      	cmp	r3, #17
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b12      	cmp	r3, #18
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x100>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	69b9      	ldr	r1, [r7, #24]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80be 	beq.w	800260a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_GPIO_Init+0x320>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a64      	ldr	r2, [pc, #400]	; (8002624 <HAL_GPIO_Init+0x320>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_GPIO_Init+0x320>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024a6:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_GPIO_Init+0x324>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_GPIO_Init+0x328>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d037      	beq.n	8002542 <HAL_GPIO_Init+0x23e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_GPIO_Init+0x32c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d031      	beq.n	800253e <HAL_GPIO_Init+0x23a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_GPIO_Init+0x330>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02b      	beq.n	800253a <HAL_GPIO_Init+0x236>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <HAL_GPIO_Init+0x334>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x232>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_GPIO_Init+0x338>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x22e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_GPIO_Init+0x33c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x22a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_GPIO_Init+0x340>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x226>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_GPIO_Init+0x344>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x222>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4f      	ldr	r2, [pc, #316]	; (800264c <HAL_GPIO_Init+0x348>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x21e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4e      	ldr	r2, [pc, #312]	; (8002650 <HAL_GPIO_Init+0x34c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x21a>
 800251a:	2309      	movs	r3, #9
 800251c:	e012      	b.n	8002544 <HAL_GPIO_Init+0x240>
 800251e:	230a      	movs	r3, #10
 8002520:	e010      	b.n	8002544 <HAL_GPIO_Init+0x240>
 8002522:	2308      	movs	r3, #8
 8002524:	e00e      	b.n	8002544 <HAL_GPIO_Init+0x240>
 8002526:	2307      	movs	r3, #7
 8002528:	e00c      	b.n	8002544 <HAL_GPIO_Init+0x240>
 800252a:	2306      	movs	r3, #6
 800252c:	e00a      	b.n	8002544 <HAL_GPIO_Init+0x240>
 800252e:	2305      	movs	r3, #5
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x240>
 8002532:	2304      	movs	r3, #4
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x240>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x240>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x240>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x240>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x324>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002562:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_GPIO_Init+0x350>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002586:	4a33      	ldr	r2, [pc, #204]	; (8002654 <HAL_GPIO_Init+0x350>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_GPIO_Init+0x350>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <HAL_GPIO_Init+0x350>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_GPIO_Init+0x350>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_GPIO_Init+0x350>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_GPIO_Init+0x350>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a13      	ldr	r2, [pc, #76]	; (8002654 <HAL_GPIO_Init+0x350>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f ae86 	bls.w	8002324 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	3724      	adds	r7, #36	; 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40021c00 	.word	0x40021c00
 800264c:	40022000 	.word	0x40022000
 8002650:	40022400 	.word	0x40022400
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800268a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268c:	b08f      	sub	sp, #60	; 0x3c
 800268e:	af0a      	add	r7, sp, #40	; 0x28
 8002690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e116      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fbe0 	bl	8000e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2203      	movs	r2, #3
 80026c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 ff4e 	bl	800457c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	687e      	ldr	r6, [r7, #4]
 80026e8:	466d      	mov	r5, sp
 80026ea:	f106 0410 	add.w	r4, r6, #16
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fe:	1d33      	adds	r3, r6, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f001 fee2 	bl	80044cc <USB_CoreInit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0d7      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f001 ff3c 	bl	800459e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e04a      	b.n	80027c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	333d      	adds	r3, #61	; 0x3d
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	333c      	adds	r3, #60	; 0x3c
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	b298      	uxth	r0, r3
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3342      	adds	r3, #66	; 0x42
 8002768:	4602      	mov	r2, r0
 800276a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	333f      	adds	r3, #63	; 0x3f
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3344      	adds	r3, #68	; 0x44
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3348      	adds	r3, #72	; 0x48
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3350      	adds	r3, #80	; 0x50
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3af      	bcc.n	800272c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e044      	b.n	800285c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3b5      	bcc.n	80027d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	687e      	ldr	r6, [r7, #4]
 800286e:	466d      	mov	r5, sp
 8002870:	f106 0410 	add.w	r4, r6, #16
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002880:	e885 0003 	stmia.w	r5, {r0, r1}
 8002884:	1d33      	adds	r3, r6, #4
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f001 feb3 	bl	80045f4 <USB_DevInit>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e014      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f80b 	bl	80028d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f865 	bl	8004992 <USB_DevDisconnect>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_PCDEx_ActivateLPM+0x44>)
 8002904:	4313      	orrs	r3, r2
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	10000003 	.word	0x10000003

0800291c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40007000 	.word	0x40007000

0800293c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800296a:	f7fe fb5d 	bl	8001028 <HAL_GetTick>
 800296e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002970:	e009      	b.n	8002986 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002972:	f7fe fb59 	bl	8001028 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002980:	d901      	bls.n	8002986 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e022      	b.n	80029cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d1ee      	bne.n	8002972 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a0:	f7fe fb42 	bl	8001028 <HAL_GetTick>
 80029a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a6:	e009      	b.n	80029bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029a8:	f7fe fb3e 	bl	8001028 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b6:	d901      	bls.n	80029bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e007      	b.n	80029cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c8:	d1ee      	bne.n	80029a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e29b      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a00:	4b96      	ldr	r3, [pc, #600]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0c:	4b93      	ldr	r3, [pc, #588]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d112      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62>
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a26:	4b8d      	ldr	r3, [pc, #564]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d06c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x130>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d168      	bne.n	8002b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e275      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x7a>
 8002a48:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e02e      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x9c>
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7b      	ldr	r2, [pc, #492]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0xc0>
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a75      	ldr	r2, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a72      	ldr	r2, [pc, #456]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fab4 	bl	8001028 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fab0 	bl	8001028 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e229      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xe8>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe faa0 	bl	8001028 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fa9c 	bl	8001028 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e215      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x110>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d069      	beq.n	8002bee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x190>
 8002b32:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x17a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1e9      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e040      	b.n	8002bee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fa52 	bl	8001028 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fa4e 	bl	8001028 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1c7      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4929      	ldr	r1, [pc, #164]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
 8002bba:	e018      	b.n	8002bee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa2e 	bl	8001028 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fa2a 	bl	8001028 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1a3      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d038      	beq.n	8002c6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d019      	beq.n	8002c36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fa0b 	bl	8001028 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe fa07 	bl	8001028 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e180      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x23a>
 8002c34:	e01a      	b.n	8002c6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe f9f1 	bl	8001028 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe f9ed 	bl	8001028 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d903      	bls.n	8002c60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e166      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
 8002c5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b92      	ldr	r3, [pc, #584]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a4 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b8c      	ldr	r3, [pc, #560]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a88      	ldr	r2, [pc, #544]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b86      	ldr	r3, [pc, #536]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca2:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <HAL_RCC_OscConfig+0x4d4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x4d4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7f      	ldr	r2, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x4d4>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe f9b5 	bl	8001028 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe f9b1 	bl	8001028 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e12a      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x4d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x31a>
 8002ce8:	4b70      	ldr	r3, [pc, #448]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a6f      	ldr	r2, [pc, #444]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	e02d      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x33c>
 8002cfe:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a67      	ldr	r2, [pc, #412]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e01c      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x35e>
 8002d20:	4b62      	ldr	r3, [pc, #392]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a61      	ldr	r2, [pc, #388]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002d3a:	4b5c      	ldr	r3, [pc, #368]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a5b      	ldr	r2, [pc, #364]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f965 	bl	8001028 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe f961 	bl	8001028 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0d8      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RCC_OscConfig+0x386>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe f94f 	bl	8001028 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe f94b 	bl	8001028 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0c2      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80ae 	beq.w	8002f28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d06d      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d14b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b32      	ldr	r3, [pc, #200]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a31      	ldr	r2, [pc, #196]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe f91c 	bl	8001028 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f918 	bl	8001028 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e091      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	491b      	ldr	r1, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe f8ea 	bl	8001028 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe f8e6 	bl	8001028 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e05f      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x47c>
 8002e76:	e057      	b.n	8002f28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe f8d0 	bl	8001028 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe f8cc 	bl	8001028 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e045      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x4b0>
 8002eaa:	e03d      	b.n	8002f28 <HAL_RCC_OscConfig+0x54c>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x558>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d030      	beq.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d129      	bne.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d122      	bne.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d119      	bne.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d10f      	bne.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d0      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b67      	ldr	r3, [pc, #412]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	4965      	ldr	r1, [pc, #404]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	494d      	ldr	r1, [pc, #308]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d040      	beq.n	800305c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e073      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b39      	ldr	r3, [pc, #228]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4936      	ldr	r1, [pc, #216]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fd fffc 	bl	8001028 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7fd fff8 	bl	8001028 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e053      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d210      	bcs.n	800308c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e032      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4916      	ldr	r1, [pc, #88]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	490e      	ldr	r1, [pc, #56]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ca:	f000 f821 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030ce:	4601      	mov	r1, r0
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x1cc>)
 80030dc:	5cd3      	ldrb	r3, [r2, r3]
 80030de:	fa21 f303 	lsr.w	r3, r1, r3
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1d0>)
 80030e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1d4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd ff58 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00
 8003100:	40023800 	.word	0x40023800
 8003104:	080052d4 	.word	0x080052d4
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003126:	4b63      	ldr	r3, [pc, #396]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d007      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x32>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d008      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x38>
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 80b4 	bne.w	80032a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800313e:	60bb      	str	r3, [r7, #8]
      break;
 8003140:	e0b3      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e0b0      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003150:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003152:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04a      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b55      	ldr	r3, [pc, #340]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	f240 11ff 	movw	r1, #511	; 0x1ff
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	ea03 0501 	and.w	r5, r3, r1
 8003174:	ea04 0602 	and.w	r6, r4, r2
 8003178:	4629      	mov	r1, r5
 800317a:	4632      	mov	r2, r6
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	0154      	lsls	r4, r2, #5
 8003186:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800318a:	014b      	lsls	r3, r1, #5
 800318c:	4619      	mov	r1, r3
 800318e:	4622      	mov	r2, r4
 8003190:	1b49      	subs	r1, r1, r5
 8003192:	eb62 0206 	sbc.w	r2, r2, r6
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f04f 0400 	mov.w	r4, #0
 800319e:	0194      	lsls	r4, r2, #6
 80031a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031a4:	018b      	lsls	r3, r1, #6
 80031a6:	1a5b      	subs	r3, r3, r1
 80031a8:	eb64 0402 	sbc.w	r4, r4, r2
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	00e2      	lsls	r2, r4, #3
 80031b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031ba:	00d9      	lsls	r1, r3, #3
 80031bc:	460b      	mov	r3, r1
 80031be:	4614      	mov	r4, r2
 80031c0:	195b      	adds	r3, r3, r5
 80031c2:	eb44 0406 	adc.w	r4, r4, r6
 80031c6:	f04f 0100 	mov.w	r1, #0
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	0262      	lsls	r2, r4, #9
 80031d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031d4:	0259      	lsls	r1, r3, #9
 80031d6:	460b      	mov	r3, r1
 80031d8:	4614      	mov	r4, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	4621      	mov	r1, r4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f04f 0400 	mov.w	r4, #0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	f7fd f882 	bl	80002f0 <__aeabi_uldivmod>
 80031ec:	4603      	mov	r3, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e049      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f4:	4b2f      	ldr	r3, [pc, #188]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	f04f 0400 	mov.w	r4, #0
 80031fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	ea03 0501 	and.w	r5, r3, r1
 800320a:	ea04 0602 	and.w	r6, r4, r2
 800320e:	4629      	mov	r1, r5
 8003210:	4632      	mov	r2, r6
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	0154      	lsls	r4, r2, #5
 800321c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003220:	014b      	lsls	r3, r1, #5
 8003222:	4619      	mov	r1, r3
 8003224:	4622      	mov	r2, r4
 8003226:	1b49      	subs	r1, r1, r5
 8003228:	eb62 0206 	sbc.w	r2, r2, r6
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	0194      	lsls	r4, r2, #6
 8003236:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	1a5b      	subs	r3, r3, r1
 800323e:	eb64 0402 	sbc.w	r4, r4, r2
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	00e2      	lsls	r2, r4, #3
 800324c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003250:	00d9      	lsls	r1, r3, #3
 8003252:	460b      	mov	r3, r1
 8003254:	4614      	mov	r4, r2
 8003256:	195b      	adds	r3, r3, r5
 8003258:	eb44 0406 	adc.w	r4, r4, r6
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	02a2      	lsls	r2, r4, #10
 8003266:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800326a:	0299      	lsls	r1, r3, #10
 800326c:	460b      	mov	r3, r1
 800326e:	4614      	mov	r4, r2
 8003270:	4618      	mov	r0, r3
 8003272:	4621      	mov	r1, r4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f04f 0400 	mov.w	r4, #0
 800327a:	461a      	mov	r2, r3
 800327c:	4623      	mov	r3, r4
 800327e:	f7fd f837 	bl	80002f0 <__aeabi_uldivmod>
 8003282:	4603      	mov	r3, r0
 8003284:	460c      	mov	r4, r1
 8003286:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	60bb      	str	r3, [r7, #8]
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032a6:	60bb      	str	r3, [r7, #8]
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	68bb      	ldr	r3, [r7, #8]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	007a1200 	.word	0x007a1200

080032c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4a03      	ldr	r2, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	080052e4 	.word	0x080052e4

08003300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003304:	f7ff ffdc 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8003308:	4601      	mov	r1, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0b5b      	lsrs	r3, r3, #13
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4a03      	ldr	r2, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	080052e4 	.word	0x080052e4

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003350:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a68      	ldr	r2, [pc, #416]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800335a:	6093      	str	r3, [r2, #8]
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	4964      	ldr	r1, [pc, #400]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d017      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003382:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	4959      	ldr	r1, [pc, #356]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033be:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	494a      	ldr	r1, [pc, #296]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 808b 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	4a39      	ldr	r2, [pc, #228]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	; 0x40
 8003418:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800342a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7fd fdfa 	bl	8001028 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003438:	f7fd fdf6 	bl	8001028 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e38f      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d035      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d02e      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003494:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003496:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d114      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fd fdbe 	bl	8001028 <HAL_GetTick>
 80034ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fd fdba 	bl	8001028 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e351      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ee      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034de:	d111      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ee:	400b      	ands	r3, r1
 80034f0:	4901      	ldr	r1, [pc, #4]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
 80034f6:	e00b      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	0ffffcff 	.word	0x0ffffcff
 8003504:	4bb3      	ldr	r3, [pc, #716]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4ab2      	ldr	r2, [pc, #712]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800350e:	6093      	str	r3, [r2, #8]
 8003510:	4bb0      	ldr	r3, [pc, #704]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	49ad      	ldr	r1, [pc, #692]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	4313      	orrs	r3, r2
 8003520:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800352e:	4ba9      	ldr	r3, [pc, #676]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	4aa7      	ldr	r2, [pc, #668]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800353e:	4ba5      	ldr	r3, [pc, #660]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003540:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	49a2      	ldr	r1, [pc, #648]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355c:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356a:	499a      	ldr	r1, [pc, #616]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357e:	4b95      	ldr	r3, [pc, #596]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	4991      	ldr	r1, [pc, #580]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a0:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	4989      	ldr	r1, [pc, #548]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035c2:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4980      	ldr	r1, [pc, #512]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e4:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4978      	ldr	r1, [pc, #480]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003606:	4b73      	ldr	r3, [pc, #460]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	f023 020c 	bic.w	r2, r3, #12
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	496f      	ldr	r1, [pc, #444]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003628:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	4967      	ldr	r1, [pc, #412]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800364a:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	495e      	ldr	r1, [pc, #376]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	4956      	ldr	r1, [pc, #344]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800368e:	4b51      	ldr	r3, [pc, #324]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036b0:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	4945      	ldr	r1, [pc, #276]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036d2:	4b40      	ldr	r3, [pc, #256]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	493c      	ldr	r1, [pc, #240]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003702:	4934      	ldr	r1, [pc, #208]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d011      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003724:	492b      	ldr	r1, [pc, #172]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d101      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	491b      	ldr	r1, [pc, #108]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003788:	4912      	ldr	r1, [pc, #72]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ac:	4909      	ldr	r1, [pc, #36]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	4986      	ldr	r1, [pc, #536]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037ec:	4b81      	ldr	r3, [pc, #516]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fc:	497d      	ldr	r1, [pc, #500]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d006      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80d6 	beq.w	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fd fc00 	bl	8001028 <HAL_GetTick>
 8003828:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800382c:	f7fd fbfc 	bl	8001028 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e195      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	2b00      	cmp	r3, #0
 800385c:	d11d      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800386c:	4b61      	ldr	r3, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003872:	0e1b      	lsrs	r3, r3, #24
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	019a      	lsls	r2, r3, #6
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	071b      	lsls	r3, r3, #28
 8003892:	4958      	ldr	r1, [pc, #352]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02e      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c4:	d129      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038d4:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038da:	0f1b      	lsrs	r3, r3, #28
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	019a      	lsls	r2, r3, #6
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	493e      	ldr	r1, [pc, #248]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003902:	4b3c      	ldr	r3, [pc, #240]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003908:	f023 021f 	bic.w	r2, r3, #31
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	3b01      	subs	r3, #1
 8003912:	4938      	ldr	r1, [pc, #224]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01d      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392c:	0e1b      	lsrs	r3, r3, #24
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003934:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393a:	0f1b      	lsrs	r3, r3, #28
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	019a      	lsls	r2, r3, #6
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	071b      	lsls	r3, r3, #28
 800395a:	4926      	ldr	r1, [pc, #152]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d011      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	491a      	ldr	r1, [pc, #104]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800399c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399e:	f7fd fb43 	bl	8001028 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a6:	f7fd fb3f 	bl	8001028 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b64      	cmp	r3, #100	; 0x64
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0d8      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80ce 	bne.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d8:	f7fd fb26 	bl	8001028 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039de:	e00b      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e0:	f7fd fb22 	bl	8001028 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d904      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0bb      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039f8:	4b5e      	ldr	r3, [pc, #376]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a04:	d0ec      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12a      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a2e:	4b51      	ldr	r3, [pc, #324]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a3c:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	0f1b      	lsrs	r3, r3, #28
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	4944      	ldr	r1, [pc, #272]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a6a:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	493d      	ldr	r1, [pc, #244]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a98:	d11d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aa8:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	0f1b      	lsrs	r3, r3, #28
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	019a      	lsls	r2, r3, #6
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	071b      	lsls	r3, r3, #28
 8003ace:	4929      	ldr	r1, [pc, #164]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	0e1b      	lsrs	r3, r3, #24
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003af0:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	019a      	lsls	r2, r3, #6
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	4917      	ldr	r1, [pc, #92]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4911      	ldr	r1, [pc, #68]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fd fa72 	bl	8001028 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b48:	f7fd fa6e 	bl	8001028 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	; 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e007      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b66:	d1ef      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e040      	b.n	8003c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f8fc 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8c0 	bl	8003d3c <UART_SetConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fb14 	bl	80041fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fb9b 	bl	8004340 <UART_CheckIdleState>
 8003c0a:	4603      	mov	r3, r0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 8081 	bne.w	8003d30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_Transmit+0x26>
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e079      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Transmit+0x38>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e072      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2221      	movs	r2, #33	; 0x21
 8003c60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fd f9e1 	bl	8001028 <HAL_GetTick>
 8003c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d108      	bne.n	8003c94 <HAL_UART_Transmit+0x80>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e003      	b.n	8003c9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ca4:	e02c      	b.n	8003d00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fb8e 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e038      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1cc      	bne.n	8003ca6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2200      	movs	r2, #0
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fb5b 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e005      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4bb1      	ldr	r3, [pc, #708]	; (800402c <UART_SetConfig+0x2f0>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a9f      	ldr	r2, [pc, #636]	; (8004030 <UART_SetConfig+0x2f4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d121      	bne.n	8003dfc <UART_SetConfig+0xc0>
 8003db8:	4b9e      	ldr	r3, [pc, #632]	; (8004034 <UART_SetConfig+0x2f8>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d816      	bhi.n	8003df4 <UART_SetConfig+0xb8>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x90>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de9 	.word	0x08003de9
 8003dd4:	08003de3 	.word	0x08003de3
 8003dd8:	08003def 	.word	0x08003def
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e151      	b.n	8004086 <UART_SetConfig+0x34a>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e14e      	b.n	8004086 <UART_SetConfig+0x34a>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e14b      	b.n	8004086 <UART_SetConfig+0x34a>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e148      	b.n	8004086 <UART_SetConfig+0x34a>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	bf00      	nop
 8003dfa:	e144      	b.n	8004086 <UART_SetConfig+0x34a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a8d      	ldr	r2, [pc, #564]	; (8004038 <UART_SetConfig+0x2fc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d134      	bne.n	8003e70 <UART_SetConfig+0x134>
 8003e06:	4b8b      	ldr	r3, [pc, #556]	; (8004034 <UART_SetConfig+0x2f8>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d829      	bhi.n	8003e68 <UART_SetConfig+0x12c>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0xe0>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e69 	.word	0x08003e69
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e5d 	.word	0x08003e5d
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e57 	.word	0x08003e57
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	08003e63 	.word	0x08003e63
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e117      	b.n	8004086 <UART_SetConfig+0x34a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e114      	b.n	8004086 <UART_SetConfig+0x34a>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e111      	b.n	8004086 <UART_SetConfig+0x34a>
 8003e62:	2308      	movs	r3, #8
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e10e      	b.n	8004086 <UART_SetConfig+0x34a>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	bf00      	nop
 8003e6e:	e10a      	b.n	8004086 <UART_SetConfig+0x34a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a71      	ldr	r2, [pc, #452]	; (800403c <UART_SetConfig+0x300>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d120      	bne.n	8003ebc <UART_SetConfig+0x180>
 8003e7a:	4b6e      	ldr	r3, [pc, #440]	; (8004034 <UART_SetConfig+0x2f8>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d00f      	beq.n	8003ea8 <UART_SetConfig+0x16c>
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d802      	bhi.n	8003e92 <UART_SetConfig+0x156>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <UART_SetConfig+0x160>
 8003e90:	e010      	b.n	8003eb4 <UART_SetConfig+0x178>
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d005      	beq.n	8003ea2 <UART_SetConfig+0x166>
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d009      	beq.n	8003eae <UART_SetConfig+0x172>
 8003e9a:	e00b      	b.n	8003eb4 <UART_SetConfig+0x178>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e0f1      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e0ee      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e0eb      	b.n	8004086 <UART_SetConfig+0x34a>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0e8      	b.n	8004086 <UART_SetConfig+0x34a>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	bf00      	nop
 8003eba:	e0e4      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5f      	ldr	r2, [pc, #380]	; (8004040 <UART_SetConfig+0x304>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d120      	bne.n	8003f08 <UART_SetConfig+0x1cc>
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <UART_SetConfig+0x2f8>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d00f      	beq.n	8003ef4 <UART_SetConfig+0x1b8>
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d802      	bhi.n	8003ede <UART_SetConfig+0x1a2>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <UART_SetConfig+0x1ac>
 8003edc:	e010      	b.n	8003f00 <UART_SetConfig+0x1c4>
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d005      	beq.n	8003eee <UART_SetConfig+0x1b2>
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d009      	beq.n	8003efa <UART_SetConfig+0x1be>
 8003ee6:	e00b      	b.n	8003f00 <UART_SetConfig+0x1c4>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e0cb      	b.n	8004086 <UART_SetConfig+0x34a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e0c8      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e0c5      	b.n	8004086 <UART_SetConfig+0x34a>
 8003efa:	2308      	movs	r3, #8
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e0c2      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f00:	2310      	movs	r3, #16
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	bf00      	nop
 8003f06:	e0be      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	; (8004044 <UART_SetConfig+0x308>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d124      	bne.n	8003f5c <UART_SetConfig+0x220>
 8003f12:	4b48      	ldr	r3, [pc, #288]	; (8004034 <UART_SetConfig+0x2f8>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f20:	d012      	beq.n	8003f48 <UART_SetConfig+0x20c>
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d802      	bhi.n	8003f2e <UART_SetConfig+0x1f2>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d007      	beq.n	8003f3c <UART_SetConfig+0x200>
 8003f2c:	e012      	b.n	8003f54 <UART_SetConfig+0x218>
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f32:	d006      	beq.n	8003f42 <UART_SetConfig+0x206>
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d009      	beq.n	8003f4e <UART_SetConfig+0x212>
 8003f3a:	e00b      	b.n	8003f54 <UART_SetConfig+0x218>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e0a1      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	e09e      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	77fb      	strb	r3, [r7, #31]
 8003f4c:	e09b      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f4e:	2308      	movs	r3, #8
 8003f50:	77fb      	strb	r3, [r7, #31]
 8003f52:	e098      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f54:	2310      	movs	r3, #16
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	bf00      	nop
 8003f5a:	e094      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a39      	ldr	r2, [pc, #228]	; (8004048 <UART_SetConfig+0x30c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d124      	bne.n	8003fb0 <UART_SetConfig+0x274>
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <UART_SetConfig+0x2f8>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d012      	beq.n	8003f9c <UART_SetConfig+0x260>
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d802      	bhi.n	8003f82 <UART_SetConfig+0x246>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <UART_SetConfig+0x254>
 8003f80:	e012      	b.n	8003fa8 <UART_SetConfig+0x26c>
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f86:	d006      	beq.n	8003f96 <UART_SetConfig+0x25a>
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8c:	d009      	beq.n	8003fa2 <UART_SetConfig+0x266>
 8003f8e:	e00b      	b.n	8003fa8 <UART_SetConfig+0x26c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e077      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e074      	b.n	8004086 <UART_SetConfig+0x34a>
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e071      	b.n	8004086 <UART_SetConfig+0x34a>
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e06e      	b.n	8004086 <UART_SetConfig+0x34a>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	bf00      	nop
 8003fae:	e06a      	b.n	8004086 <UART_SetConfig+0x34a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a25      	ldr	r2, [pc, #148]	; (800404c <UART_SetConfig+0x310>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d124      	bne.n	8004004 <UART_SetConfig+0x2c8>
 8003fba:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <UART_SetConfig+0x2f8>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d012      	beq.n	8003ff0 <UART_SetConfig+0x2b4>
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d802      	bhi.n	8003fd6 <UART_SetConfig+0x29a>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <UART_SetConfig+0x2a8>
 8003fd4:	e012      	b.n	8003ffc <UART_SetConfig+0x2c0>
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fda:	d006      	beq.n	8003fea <UART_SetConfig+0x2ae>
 8003fdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe0:	d009      	beq.n	8003ff6 <UART_SetConfig+0x2ba>
 8003fe2:	e00b      	b.n	8003ffc <UART_SetConfig+0x2c0>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e04d      	b.n	8004086 <UART_SetConfig+0x34a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e04a      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e047      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e044      	b.n	8004086 <UART_SetConfig+0x34a>
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	bf00      	nop
 8004002:	e040      	b.n	8004086 <UART_SetConfig+0x34a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a11      	ldr	r2, [pc, #68]	; (8004050 <UART_SetConfig+0x314>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d139      	bne.n	8004082 <UART_SetConfig+0x346>
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <UART_SetConfig+0x2f8>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401c:	d027      	beq.n	800406e <UART_SetConfig+0x332>
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004022:	d817      	bhi.n	8004054 <UART_SetConfig+0x318>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <UART_SetConfig+0x326>
 8004028:	e027      	b.n	800407a <UART_SetConfig+0x33e>
 800402a:	bf00      	nop
 800402c:	efff69f3 	.word	0xefff69f3
 8004030:	40011000 	.word	0x40011000
 8004034:	40023800 	.word	0x40023800
 8004038:	40004400 	.word	0x40004400
 800403c:	40004800 	.word	0x40004800
 8004040:	40004c00 	.word	0x40004c00
 8004044:	40005000 	.word	0x40005000
 8004048:	40011400 	.word	0x40011400
 800404c:	40007800 	.word	0x40007800
 8004050:	40007c00 	.word	0x40007c00
 8004054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004058:	d006      	beq.n	8004068 <UART_SetConfig+0x32c>
 800405a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800405e:	d009      	beq.n	8004074 <UART_SetConfig+0x338>
 8004060:	e00b      	b.n	800407a <UART_SetConfig+0x33e>
 8004062:	2300      	movs	r3, #0
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e00e      	b.n	8004086 <UART_SetConfig+0x34a>
 8004068:	2302      	movs	r3, #2
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e00b      	b.n	8004086 <UART_SetConfig+0x34a>
 800406e:	2304      	movs	r3, #4
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e008      	b.n	8004086 <UART_SetConfig+0x34a>
 8004074:	2308      	movs	r3, #8
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e005      	b.n	8004086 <UART_SetConfig+0x34a>
 800407a:	2310      	movs	r3, #16
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	bf00      	nop
 8004080:	e001      	b.n	8004086 <UART_SetConfig+0x34a>
 8004082:	2310      	movs	r3, #16
 8004084:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408e:	d15b      	bne.n	8004148 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	2b08      	cmp	r3, #8
 8004094:	d827      	bhi.n	80040e6 <UART_SetConfig+0x3aa>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x360>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040d1 	.word	0x080040d1
 80040a8:	080040e7 	.word	0x080040e7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040e7 	.word	0x080040e7
 80040b4:	080040e7 	.word	0x080040e7
 80040b8:	080040e7 	.word	0x080040e7
 80040bc:	080040df 	.word	0x080040df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7ff f90a 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 80040c4:	61b8      	str	r0, [r7, #24]
        break;
 80040c6:	e013      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7ff f91a 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 80040cc:	61b8      	str	r0, [r7, #24]
        break;
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d0:	4b49      	ldr	r3, [pc, #292]	; (80041f8 <UART_SetConfig+0x4bc>)
 80040d2:	61bb      	str	r3, [r7, #24]
        break;
 80040d4:	e00c      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d6:	f7ff f81b 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80040da:	61b8      	str	r0, [r7, #24]
        break;
 80040dc:	e008      	b.n	80040f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	61bb      	str	r3, [r7, #24]
        break;
 80040e4:	e004      	b.n	80040f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	77bb      	strb	r3, [r7, #30]
        break;
 80040ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d074      	beq.n	80041e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d916      	bls.n	8004142 <UART_SetConfig+0x406>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411a:	d212      	bcs.n	8004142 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b29a      	uxth	r2, r3
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	4313      	orrs	r3, r2
 8004136:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	89fa      	ldrh	r2, [r7, #14]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e04e      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	77bb      	strb	r3, [r7, #30]
 8004146:	e04b      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004148:	7ffb      	ldrb	r3, [r7, #31]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x462>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x418>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7ff f8ae 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 800417c:	61b8      	str	r0, [r7, #24]
        break;
 800417e:	e013      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7ff f8be 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e00f      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <UART_SetConfig+0x4bc>)
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e00c      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe ffbf 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8004192:	61b8      	str	r0, [r7, #24]
        break;
 8004194:	e008      	b.n	80041a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61bb      	str	r3, [r7, #24]
        break;
 800419c:	e004      	b.n	80041a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77bb      	strb	r3, [r7, #30]
        break;
 80041a6:	bf00      	nop
    }

    if (pclk != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	085a      	lsrs	r2, r3, #1
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	441a      	add	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0f      	cmp	r3, #15
 80041c8:	d908      	bls.n	80041dc <UART_SetConfig+0x4a0>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d0:	d204      	bcs.n	80041dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e001      	b.n	80041e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	00f42400 	.word	0x00f42400

080041fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01a      	beq.n	8004312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fa:	d10a      	bne.n	8004312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004350:	f7fc fe6a 	bl	8001028 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d10e      	bne.n	8004382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f82d 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e023      	b.n	80043ca <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d10e      	bne.n	80043ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f817 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00d      	b.n	80043ca <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	e05e      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d05a      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7fc fe1c 	bl	8001028 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <UART_WaitOnFlagUntilTimeout+0x30>
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11b      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004410:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e043      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02c      	beq.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004456:	d124      	bne.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004460:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004470:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e00f      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	bf0c      	ite	eq
 80044b2:	2301      	moveq	r3, #1
 80044b4:	2300      	movne	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d091      	beq.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044cc:	b084      	sub	sp, #16
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	f107 001c 	add.w	r0, r7, #28
 80044da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d120      	bne.n	8004526 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <USB_CoreInit+0xac>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa5a 	bl	80049d4 <USB_CoreReset>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	e010      	b.n	8004548 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa4e 	bl	80049d4 <USB_CoreReset>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10b      	bne.n	8004566 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0206 	orr.w	r2, r3, #6
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004572:	b004      	add	sp, #16
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	ffbdffbf 	.word	0xffbdffbf

0800457c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 0201 	bic.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e00b      	b.n	80045e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e001      	b.n	80045e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e003      	b.n	80045ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045e2:	2032      	movs	r0, #50	; 0x32
 80045e4:	f7fc fd2c 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f4:	b084      	sub	sp, #16
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	e009      	b.n	8004628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3340      	adds	r3, #64	; 0x40
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3301      	adds	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b0e      	cmp	r3, #14
 800462c:	d9f2      	bls.n	8004614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800462e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11c      	bne.n	800466e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004642:	f043 0302 	orr.w	r3, r3, #2
 8004646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e005      	b.n	800467a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	4619      	mov	r1, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004694:	461a      	mov	r2, r3
 8004696:	680b      	ldr	r3, [r1, #0]
 8004698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10c      	bne.n	80046ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046a6:	2100      	movs	r1, #0
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f959 	bl	8004960 <USB_SetDevSpeed>
 80046ae:	e018      	b.n	80046e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046b0:	2101      	movs	r1, #1
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f954 	bl	8004960 <USB_SetDevSpeed>
 80046b8:	e013      	b.n	80046e2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d10c      	bne.n	80046da <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046c6:	2100      	movs	r1, #0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f949 	bl	8004960 <USB_SetDevSpeed>
 80046ce:	e008      	b.n	80046e2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046d0:	2101      	movs	r1, #1
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f944 	bl	8004960 <USB_SetDevSpeed>
 80046d8:	e003      	b.n	80046e2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046da:	2103      	movs	r1, #3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f93f 	bl	8004960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046e2:	2110      	movs	r1, #16
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8f3 	bl	80048d0 <USB_FlushTxFifo>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f911 	bl	800491c <USB_FlushRxFifo>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e043      	b.n	80047b6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004744:	d118      	bne.n	8004778 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e013      	b.n	800478a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e008      	b.n	800478a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2300      	movs	r3, #0
 8004788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	461a      	mov	r2, r3
 80047aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b7      	bcc.n	800472e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e043      	b.n	800484c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047da:	d118      	bne.n	800480e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	461a      	mov	r2, r3
 80047f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e013      	b.n	8004820 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e008      	b.n	8004820 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3301      	adds	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3b7      	bcc.n	80047c4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 0210 	orr.w	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <USB_DevInit+0x2d4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f043 0208 	orr.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699a      	ldr	r2, [r3, #24]
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <USB_DevInit+0x2d8>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c4:	b004      	add	sp, #16
 80048c6:	4770      	bx	lr
 80048c8:	803c3800 	.word	0x803c3800
 80048cc:	40000004 	.word	0x40000004

080048d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <USB_FlushTxFifo+0x48>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d0f0      	beq.n	80048ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	00030d40 	.word	0x00030d40

0800491c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2210      	movs	r2, #16
 800492c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <USB_FlushRxFifo+0x40>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d0f0      	beq.n	800492e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	00030d40 	.word	0x00030d40

08004960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <USB_CoreReset+0x64>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e01b      	b.n	8004a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	daf2      	bge.n	80049e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <USB_CoreReset+0x64>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e006      	b.n	8004a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d0f0      	beq.n	8004a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	00030d40 	.word	0x00030d40

08004a3c <__errno>:
 8004a3c:	4b01      	ldr	r3, [pc, #4]	; (8004a44 <__errno+0x8>)
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4e0d      	ldr	r6, [pc, #52]	; (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1ba4      	subs	r4, r4, r6
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2500      	movs	r5, #0
 8004a54:	42a5      	cmp	r5, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4e0b      	ldr	r6, [pc, #44]	; (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	; (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f000 fc26 	bl	80052ac <_init>
 8004a60:	1ba4      	subs	r4, r4, r6
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2500      	movs	r5, #0
 8004a66:	42a5      	cmp	r5, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a70:	4798      	blx	r3
 8004a72:	3501      	adds	r5, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a7a:	4798      	blx	r3
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08005328 	.word	0x08005328
 8004a84:	08005328 	.word	0x08005328
 8004a88:	08005328 	.word	0x08005328
 8004a8c:	0800532c 	.word	0x0800532c

08004a90 <memset>:
 8004a90:	4402      	add	r2, r0
 8004a92:	4603      	mov	r3, r0
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d100      	bne.n	8004a9a <memset+0xa>
 8004a98:	4770      	bx	lr
 8004a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9e:	e7f9      	b.n	8004a94 <memset+0x4>

08004aa0 <siprintf>:
 8004aa0:	b40e      	push	{r1, r2, r3}
 8004aa2:	b500      	push	{lr}
 8004aa4:	b09c      	sub	sp, #112	; 0x70
 8004aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8004aa8:	9002      	str	r0, [sp, #8]
 8004aaa:	9006      	str	r0, [sp, #24]
 8004aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <siprintf+0x38>)
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	9104      	str	r1, [sp, #16]
 8004ab6:	4909      	ldr	r1, [pc, #36]	; (8004adc <siprintf+0x3c>)
 8004ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	6800      	ldr	r0, [r0, #0]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	a902      	add	r1, sp, #8
 8004ac4:	f000 f866 	bl	8004b94 <_svfiprintf_r>
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	b01c      	add	sp, #112	; 0x70
 8004ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad4:	b003      	add	sp, #12
 8004ad6:	4770      	bx	lr
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	ffff0208 	.word	0xffff0208

08004ae0 <__ssputs_r>:
 8004ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	688e      	ldr	r6, [r1, #8]
 8004ae6:	429e      	cmp	r6, r3
 8004ae8:	4682      	mov	sl, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	4690      	mov	r8, r2
 8004aee:	4699      	mov	r9, r3
 8004af0:	d837      	bhi.n	8004b62 <__ssputs_r+0x82>
 8004af2:	898a      	ldrh	r2, [r1, #12]
 8004af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004af8:	d031      	beq.n	8004b5e <__ssputs_r+0x7e>
 8004afa:	6825      	ldr	r5, [r4, #0]
 8004afc:	6909      	ldr	r1, [r1, #16]
 8004afe:	1a6f      	subs	r7, r5, r1
 8004b00:	6965      	ldr	r5, [r4, #20]
 8004b02:	2302      	movs	r3, #2
 8004b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b08:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b0c:	f109 0301 	add.w	r3, r9, #1
 8004b10:	443b      	add	r3, r7
 8004b12:	429d      	cmp	r5, r3
 8004b14:	bf38      	it	cc
 8004b16:	461d      	movcc	r5, r3
 8004b18:	0553      	lsls	r3, r2, #21
 8004b1a:	d530      	bpl.n	8004b7e <__ssputs_r+0x9e>
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f000 fb2b 	bl	8005178 <_malloc_r>
 8004b22:	4606      	mov	r6, r0
 8004b24:	b950      	cbnz	r0, 8004b3c <__ssputs_r+0x5c>
 8004b26:	230c      	movs	r3, #12
 8004b28:	f8ca 3000 	str.w	r3, [sl]
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	463a      	mov	r2, r7
 8004b3e:	6921      	ldr	r1, [r4, #16]
 8004b40:	f000 faa8 	bl	8005094 <memcpy>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	6126      	str	r6, [r4, #16]
 8004b52:	6165      	str	r5, [r4, #20]
 8004b54:	443e      	add	r6, r7
 8004b56:	1bed      	subs	r5, r5, r7
 8004b58:	6026      	str	r6, [r4, #0]
 8004b5a:	60a5      	str	r5, [r4, #8]
 8004b5c:	464e      	mov	r6, r9
 8004b5e:	454e      	cmp	r6, r9
 8004b60:	d900      	bls.n	8004b64 <__ssputs_r+0x84>
 8004b62:	464e      	mov	r6, r9
 8004b64:	4632      	mov	r2, r6
 8004b66:	4641      	mov	r1, r8
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	f000 fa9e 	bl	80050aa <memmove>
 8004b6e:	68a3      	ldr	r3, [r4, #8]
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	60a3      	str	r3, [r4, #8]
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	441e      	add	r6, r3
 8004b78:	6026      	str	r6, [r4, #0]
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e7dc      	b.n	8004b38 <__ssputs_r+0x58>
 8004b7e:	462a      	mov	r2, r5
 8004b80:	f000 fb54 	bl	800522c <_realloc_r>
 8004b84:	4606      	mov	r6, r0
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1e2      	bne.n	8004b50 <__ssputs_r+0x70>
 8004b8a:	6921      	ldr	r1, [r4, #16]
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	f000 faa5 	bl	80050dc <_free_r>
 8004b92:	e7c8      	b.n	8004b26 <__ssputs_r+0x46>

08004b94 <_svfiprintf_r>:
 8004b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	461d      	mov	r5, r3
 8004b9a:	898b      	ldrh	r3, [r1, #12]
 8004b9c:	061f      	lsls	r7, r3, #24
 8004b9e:	b09d      	sub	sp, #116	; 0x74
 8004ba0:	4680      	mov	r8, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	d50f      	bpl.n	8004bc8 <_svfiprintf_r+0x34>
 8004ba8:	690b      	ldr	r3, [r1, #16]
 8004baa:	b96b      	cbnz	r3, 8004bc8 <_svfiprintf_r+0x34>
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	f000 fae3 	bl	8005178 <_malloc_r>
 8004bb2:	6020      	str	r0, [r4, #0]
 8004bb4:	6120      	str	r0, [r4, #16]
 8004bb6:	b928      	cbnz	r0, 8004bc4 <_svfiprintf_r+0x30>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	f8c8 3000 	str.w	r3, [r8]
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	e0c8      	b.n	8004d56 <_svfiprintf_r+0x1c2>
 8004bc4:	2340      	movs	r3, #64	; 0x40
 8004bc6:	6163      	str	r3, [r4, #20]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9309      	str	r3, [sp, #36]	; 0x24
 8004bcc:	2320      	movs	r3, #32
 8004bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bd2:	2330      	movs	r3, #48	; 0x30
 8004bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bd8:	9503      	str	r5, [sp, #12]
 8004bda:	f04f 0b01 	mov.w	fp, #1
 8004bde:	4637      	mov	r7, r6
 8004be0:	463d      	mov	r5, r7
 8004be2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004be6:	b10b      	cbz	r3, 8004bec <_svfiprintf_r+0x58>
 8004be8:	2b25      	cmp	r3, #37	; 0x25
 8004bea:	d13e      	bne.n	8004c6a <_svfiprintf_r+0xd6>
 8004bec:	ebb7 0a06 	subs.w	sl, r7, r6
 8004bf0:	d00b      	beq.n	8004c0a <_svfiprintf_r+0x76>
 8004bf2:	4653      	mov	r3, sl
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	f7ff ff71 	bl	8004ae0 <__ssputs_r>
 8004bfe:	3001      	adds	r0, #1
 8004c00:	f000 80a4 	beq.w	8004d4c <_svfiprintf_r+0x1b8>
 8004c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c06:	4453      	add	r3, sl
 8004c08:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0a:	783b      	ldrb	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 809d 	beq.w	8004d4c <_svfiprintf_r+0x1b8>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	9307      	str	r3, [sp, #28]
 8004c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c24:	931a      	str	r3, [sp, #104]	; 0x68
 8004c26:	462f      	mov	r7, r5
 8004c28:	2205      	movs	r2, #5
 8004c2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c2e:	4850      	ldr	r0, [pc, #320]	; (8004d70 <_svfiprintf_r+0x1dc>)
 8004c30:	f7fb fb0e 	bl	8000250 <memchr>
 8004c34:	9b04      	ldr	r3, [sp, #16]
 8004c36:	b9d0      	cbnz	r0, 8004c6e <_svfiprintf_r+0xda>
 8004c38:	06d9      	lsls	r1, r3, #27
 8004c3a:	bf44      	itt	mi
 8004c3c:	2220      	movmi	r2, #32
 8004c3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c42:	071a      	lsls	r2, r3, #28
 8004c44:	bf44      	itt	mi
 8004c46:	222b      	movmi	r2, #43	; 0x2b
 8004c48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c4c:	782a      	ldrb	r2, [r5, #0]
 8004c4e:	2a2a      	cmp	r2, #42	; 0x2a
 8004c50:	d015      	beq.n	8004c7e <_svfiprintf_r+0xea>
 8004c52:	9a07      	ldr	r2, [sp, #28]
 8004c54:	462f      	mov	r7, r5
 8004c56:	2000      	movs	r0, #0
 8004c58:	250a      	movs	r5, #10
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c60:	3b30      	subs	r3, #48	; 0x30
 8004c62:	2b09      	cmp	r3, #9
 8004c64:	d94d      	bls.n	8004d02 <_svfiprintf_r+0x16e>
 8004c66:	b1b8      	cbz	r0, 8004c98 <_svfiprintf_r+0x104>
 8004c68:	e00f      	b.n	8004c8a <_svfiprintf_r+0xf6>
 8004c6a:	462f      	mov	r7, r5
 8004c6c:	e7b8      	b.n	8004be0 <_svfiprintf_r+0x4c>
 8004c6e:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <_svfiprintf_r+0x1dc>)
 8004c70:	1a80      	subs	r0, r0, r2
 8004c72:	fa0b f000 	lsl.w	r0, fp, r0
 8004c76:	4318      	orrs	r0, r3
 8004c78:	9004      	str	r0, [sp, #16]
 8004c7a:	463d      	mov	r5, r7
 8004c7c:	e7d3      	b.n	8004c26 <_svfiprintf_r+0x92>
 8004c7e:	9a03      	ldr	r2, [sp, #12]
 8004c80:	1d11      	adds	r1, r2, #4
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	9103      	str	r1, [sp, #12]
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	db01      	blt.n	8004c8e <_svfiprintf_r+0xfa>
 8004c8a:	9207      	str	r2, [sp, #28]
 8004c8c:	e004      	b.n	8004c98 <_svfiprintf_r+0x104>
 8004c8e:	4252      	negs	r2, r2
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	9207      	str	r2, [sp, #28]
 8004c96:	9304      	str	r3, [sp, #16]
 8004c98:	783b      	ldrb	r3, [r7, #0]
 8004c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c9c:	d10c      	bne.n	8004cb8 <_svfiprintf_r+0x124>
 8004c9e:	787b      	ldrb	r3, [r7, #1]
 8004ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca2:	d133      	bne.n	8004d0c <_svfiprintf_r+0x178>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	9203      	str	r2, [sp, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfb8      	it	lt
 8004cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cb4:	3702      	adds	r7, #2
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	4d2e      	ldr	r5, [pc, #184]	; (8004d74 <_svfiprintf_r+0x1e0>)
 8004cba:	7839      	ldrb	r1, [r7, #0]
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7fb fac6 	bl	8000250 <memchr>
 8004cc4:	b138      	cbz	r0, 8004cd6 <_svfiprintf_r+0x142>
 8004cc6:	2340      	movs	r3, #64	; 0x40
 8004cc8:	1b40      	subs	r0, r0, r5
 8004cca:	fa03 f000 	lsl.w	r0, r3, r0
 8004cce:	9b04      	ldr	r3, [sp, #16]
 8004cd0:	4303      	orrs	r3, r0
 8004cd2:	3701      	adds	r7, #1
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	7839      	ldrb	r1, [r7, #0]
 8004cd8:	4827      	ldr	r0, [pc, #156]	; (8004d78 <_svfiprintf_r+0x1e4>)
 8004cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cde:	2206      	movs	r2, #6
 8004ce0:	1c7e      	adds	r6, r7, #1
 8004ce2:	f7fb fab5 	bl	8000250 <memchr>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d038      	beq.n	8004d5c <_svfiprintf_r+0x1c8>
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <_svfiprintf_r+0x1e8>)
 8004cec:	bb13      	cbnz	r3, 8004d34 <_svfiprintf_r+0x1a0>
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	f023 0307 	bic.w	r3, r3, #7
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	9303      	str	r3, [sp, #12]
 8004cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfc:	444b      	add	r3, r9
 8004cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004d00:	e76d      	b.n	8004bde <_svfiprintf_r+0x4a>
 8004d02:	fb05 3202 	mla	r2, r5, r2, r3
 8004d06:	2001      	movs	r0, #1
 8004d08:	460f      	mov	r7, r1
 8004d0a:	e7a6      	b.n	8004c5a <_svfiprintf_r+0xc6>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	3701      	adds	r7, #1
 8004d10:	9305      	str	r3, [sp, #20]
 8004d12:	4619      	mov	r1, r3
 8004d14:	250a      	movs	r5, #10
 8004d16:	4638      	mov	r0, r7
 8004d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d1c:	3a30      	subs	r2, #48	; 0x30
 8004d1e:	2a09      	cmp	r2, #9
 8004d20:	d903      	bls.n	8004d2a <_svfiprintf_r+0x196>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0c8      	beq.n	8004cb8 <_svfiprintf_r+0x124>
 8004d26:	9105      	str	r1, [sp, #20]
 8004d28:	e7c6      	b.n	8004cb8 <_svfiprintf_r+0x124>
 8004d2a:	fb05 2101 	mla	r1, r5, r1, r2
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4607      	mov	r7, r0
 8004d32:	e7f0      	b.n	8004d16 <_svfiprintf_r+0x182>
 8004d34:	ab03      	add	r3, sp, #12
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <_svfiprintf_r+0x1ec>)
 8004d3c:	a904      	add	r1, sp, #16
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f3af 8000 	nop.w
 8004d44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d48:	4681      	mov	r9, r0
 8004d4a:	d1d6      	bne.n	8004cfa <_svfiprintf_r+0x166>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	065b      	lsls	r3, r3, #25
 8004d50:	f53f af35 	bmi.w	8004bbe <_svfiprintf_r+0x2a>
 8004d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d56:	b01d      	add	sp, #116	; 0x74
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	ab03      	add	r3, sp, #12
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4622      	mov	r2, r4
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <_svfiprintf_r+0x1ec>)
 8004d64:	a904      	add	r1, sp, #16
 8004d66:	4640      	mov	r0, r8
 8004d68:	f000 f882 	bl	8004e70 <_printf_i>
 8004d6c:	e7ea      	b.n	8004d44 <_svfiprintf_r+0x1b0>
 8004d6e:	bf00      	nop
 8004d70:	080052ec 	.word	0x080052ec
 8004d74:	080052f2 	.word	0x080052f2
 8004d78:	080052f6 	.word	0x080052f6
 8004d7c:	00000000 	.word	0x00000000
 8004d80:	08004ae1 	.word	0x08004ae1

08004d84 <_printf_common>:
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	4691      	mov	r9, r2
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	688a      	ldr	r2, [r1, #8]
 8004d8e:	690b      	ldr	r3, [r1, #16]
 8004d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	bfb8      	it	lt
 8004d98:	4613      	movlt	r3, r2
 8004d9a:	f8c9 3000 	str.w	r3, [r9]
 8004d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004da2:	4606      	mov	r6, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	b112      	cbz	r2, 8004dae <_printf_common+0x2a>
 8004da8:	3301      	adds	r3, #1
 8004daa:	f8c9 3000 	str.w	r3, [r9]
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	0699      	lsls	r1, r3, #26
 8004db2:	bf42      	ittt	mi
 8004db4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004db8:	3302      	addmi	r3, #2
 8004dba:	f8c9 3000 	strmi.w	r3, [r9]
 8004dbe:	6825      	ldr	r5, [r4, #0]
 8004dc0:	f015 0506 	ands.w	r5, r5, #6
 8004dc4:	d107      	bne.n	8004dd6 <_printf_common+0x52>
 8004dc6:	f104 0a19 	add.w	sl, r4, #25
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dc28      	bgt.n	8004e28 <_printf_common+0xa4>
 8004dd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	3300      	adds	r3, #0
 8004dde:	bf18      	it	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	0692      	lsls	r2, r2, #26
 8004de4:	d42d      	bmi.n	8004e42 <_printf_common+0xbe>
 8004de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dea:	4639      	mov	r1, r7
 8004dec:	4630      	mov	r0, r6
 8004dee:	47c0      	blx	r8
 8004df0:	3001      	adds	r0, #1
 8004df2:	d020      	beq.n	8004e36 <_printf_common+0xb2>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	68e5      	ldr	r5, [r4, #12]
 8004df8:	f8d9 2000 	ldr.w	r2, [r9]
 8004dfc:	f003 0306 	and.w	r3, r3, #6
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	bf08      	it	eq
 8004e04:	1aad      	subeq	r5, r5, r2
 8004e06:	68a3      	ldr	r3, [r4, #8]
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	bf0c      	ite	eq
 8004e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e10:	2500      	movne	r5, #0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	bfc4      	itt	gt
 8004e16:	1a9b      	subgt	r3, r3, r2
 8004e18:	18ed      	addgt	r5, r5, r3
 8004e1a:	f04f 0900 	mov.w	r9, #0
 8004e1e:	341a      	adds	r4, #26
 8004e20:	454d      	cmp	r5, r9
 8004e22:	d11a      	bne.n	8004e5a <_printf_common+0xd6>
 8004e24:	2000      	movs	r0, #0
 8004e26:	e008      	b.n	8004e3a <_printf_common+0xb6>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	4639      	mov	r1, r7
 8004e2e:	4630      	mov	r0, r6
 8004e30:	47c0      	blx	r8
 8004e32:	3001      	adds	r0, #1
 8004e34:	d103      	bne.n	8004e3e <_printf_common+0xba>
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	3501      	adds	r5, #1
 8004e40:	e7c3      	b.n	8004dca <_printf_common+0x46>
 8004e42:	18e1      	adds	r1, r4, r3
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	2030      	movs	r0, #48	; 0x30
 8004e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e4c:	4422      	add	r2, r4
 8004e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e56:	3302      	adds	r3, #2
 8004e58:	e7c5      	b.n	8004de6 <_printf_common+0x62>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	4639      	mov	r1, r7
 8004e60:	4630      	mov	r0, r6
 8004e62:	47c0      	blx	r8
 8004e64:	3001      	adds	r0, #1
 8004e66:	d0e6      	beq.n	8004e36 <_printf_common+0xb2>
 8004e68:	f109 0901 	add.w	r9, r9, #1
 8004e6c:	e7d8      	b.n	8004e20 <_printf_common+0x9c>
	...

08004e70 <_printf_i>:
 8004e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004e78:	460c      	mov	r4, r1
 8004e7a:	7e09      	ldrb	r1, [r1, #24]
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	296e      	cmp	r1, #110	; 0x6e
 8004e80:	4617      	mov	r7, r2
 8004e82:	4606      	mov	r6, r0
 8004e84:	4698      	mov	r8, r3
 8004e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e88:	f000 80b3 	beq.w	8004ff2 <_printf_i+0x182>
 8004e8c:	d822      	bhi.n	8004ed4 <_printf_i+0x64>
 8004e8e:	2963      	cmp	r1, #99	; 0x63
 8004e90:	d036      	beq.n	8004f00 <_printf_i+0x90>
 8004e92:	d80a      	bhi.n	8004eaa <_printf_i+0x3a>
 8004e94:	2900      	cmp	r1, #0
 8004e96:	f000 80b9 	beq.w	800500c <_printf_i+0x19c>
 8004e9a:	2958      	cmp	r1, #88	; 0x58
 8004e9c:	f000 8083 	beq.w	8004fa6 <_printf_i+0x136>
 8004ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ea8:	e032      	b.n	8004f10 <_printf_i+0xa0>
 8004eaa:	2964      	cmp	r1, #100	; 0x64
 8004eac:	d001      	beq.n	8004eb2 <_printf_i+0x42>
 8004eae:	2969      	cmp	r1, #105	; 0x69
 8004eb0:	d1f6      	bne.n	8004ea0 <_printf_i+0x30>
 8004eb2:	6820      	ldr	r0, [r4, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	0605      	lsls	r5, r0, #24
 8004eb8:	f103 0104 	add.w	r1, r3, #4
 8004ebc:	d52a      	bpl.n	8004f14 <_printf_i+0xa4>
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da03      	bge.n	8004ece <_printf_i+0x5e>
 8004ec6:	222d      	movs	r2, #45	; 0x2d
 8004ec8:	425b      	negs	r3, r3
 8004eca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ece:	486f      	ldr	r0, [pc, #444]	; (800508c <_printf_i+0x21c>)
 8004ed0:	220a      	movs	r2, #10
 8004ed2:	e039      	b.n	8004f48 <_printf_i+0xd8>
 8004ed4:	2973      	cmp	r1, #115	; 0x73
 8004ed6:	f000 809d 	beq.w	8005014 <_printf_i+0x1a4>
 8004eda:	d808      	bhi.n	8004eee <_printf_i+0x7e>
 8004edc:	296f      	cmp	r1, #111	; 0x6f
 8004ede:	d020      	beq.n	8004f22 <_printf_i+0xb2>
 8004ee0:	2970      	cmp	r1, #112	; 0x70
 8004ee2:	d1dd      	bne.n	8004ea0 <_printf_i+0x30>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f043 0320 	orr.w	r3, r3, #32
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	e003      	b.n	8004ef6 <_printf_i+0x86>
 8004eee:	2975      	cmp	r1, #117	; 0x75
 8004ef0:	d017      	beq.n	8004f22 <_printf_i+0xb2>
 8004ef2:	2978      	cmp	r1, #120	; 0x78
 8004ef4:	d1d4      	bne.n	8004ea0 <_printf_i+0x30>
 8004ef6:	2378      	movs	r3, #120	; 0x78
 8004ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efc:	4864      	ldr	r0, [pc, #400]	; (8005090 <_printf_i+0x220>)
 8004efe:	e055      	b.n	8004fac <_printf_i+0x13c>
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	1d19      	adds	r1, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6011      	str	r1, [r2, #0]
 8004f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f10:	2301      	movs	r3, #1
 8004f12:	e08c      	b.n	800502e <_printf_i+0x1be>
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6011      	str	r1, [r2, #0]
 8004f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f1c:	bf18      	it	ne
 8004f1e:	b21b      	sxthne	r3, r3
 8004f20:	e7cf      	b.n	8004ec2 <_printf_i+0x52>
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6010      	str	r0, [r2, #0]
 8004f2a:	0628      	lsls	r0, r5, #24
 8004f2c:	d501      	bpl.n	8004f32 <_printf_i+0xc2>
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <_printf_i+0xc8>
 8004f32:	0668      	lsls	r0, r5, #25
 8004f34:	d5fb      	bpl.n	8004f2e <_printf_i+0xbe>
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	4854      	ldr	r0, [pc, #336]	; (800508c <_printf_i+0x21c>)
 8004f3a:	296f      	cmp	r1, #111	; 0x6f
 8004f3c:	bf14      	ite	ne
 8004f3e:	220a      	movne	r2, #10
 8004f40:	2208      	moveq	r2, #8
 8004f42:	2100      	movs	r1, #0
 8004f44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f48:	6865      	ldr	r5, [r4, #4]
 8004f4a:	60a5      	str	r5, [r4, #8]
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	f2c0 8095 	blt.w	800507c <_printf_i+0x20c>
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	f021 0104 	bic.w	r1, r1, #4
 8004f58:	6021      	str	r1, [r4, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d13d      	bne.n	8004fda <_printf_i+0x16a>
 8004f5e:	2d00      	cmp	r5, #0
 8004f60:	f040 808e 	bne.w	8005080 <_printf_i+0x210>
 8004f64:	4665      	mov	r5, ip
 8004f66:	2a08      	cmp	r2, #8
 8004f68:	d10b      	bne.n	8004f82 <_printf_i+0x112>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	07db      	lsls	r3, r3, #31
 8004f6e:	d508      	bpl.n	8004f82 <_printf_i+0x112>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	bfde      	ittt	le
 8004f78:	2330      	movle	r3, #48	; 0x30
 8004f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f82:	ebac 0305 	sub.w	r3, ip, r5
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	f8cd 8000 	str.w	r8, [sp]
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	aa03      	add	r2, sp, #12
 8004f90:	4621      	mov	r1, r4
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7ff fef6 	bl	8004d84 <_printf_common>
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d14d      	bne.n	8005038 <_printf_i+0x1c8>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	b005      	add	sp, #20
 8004fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fa6:	4839      	ldr	r0, [pc, #228]	; (800508c <_printf_i+0x21c>)
 8004fa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	1d1d      	adds	r5, r3, #4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6015      	str	r5, [r2, #0]
 8004fb6:	060a      	lsls	r2, r1, #24
 8004fb8:	d50b      	bpl.n	8004fd2 <_printf_i+0x162>
 8004fba:	07ca      	lsls	r2, r1, #31
 8004fbc:	bf44      	itt	mi
 8004fbe:	f041 0120 	orrmi.w	r1, r1, #32
 8004fc2:	6021      	strmi	r1, [r4, #0]
 8004fc4:	b91b      	cbnz	r3, 8004fce <_printf_i+0x15e>
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	f022 0220 	bic.w	r2, r2, #32
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	2210      	movs	r2, #16
 8004fd0:	e7b7      	b.n	8004f42 <_printf_i+0xd2>
 8004fd2:	064d      	lsls	r5, r1, #25
 8004fd4:	bf48      	it	mi
 8004fd6:	b29b      	uxthmi	r3, r3
 8004fd8:	e7ef      	b.n	8004fba <_printf_i+0x14a>
 8004fda:	4665      	mov	r5, ip
 8004fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fe0:	fb02 3311 	mls	r3, r2, r1, r3
 8004fe4:	5cc3      	ldrb	r3, [r0, r3]
 8004fe6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fea:	460b      	mov	r3, r1
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d1f5      	bne.n	8004fdc <_printf_i+0x16c>
 8004ff0:	e7b9      	b.n	8004f66 <_printf_i+0xf6>
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	6825      	ldr	r5, [r4, #0]
 8004ff6:	6961      	ldr	r1, [r4, #20]
 8004ff8:	1d18      	adds	r0, r3, #4
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	0628      	lsls	r0, r5, #24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	d501      	bpl.n	8005006 <_printf_i+0x196>
 8005002:	6019      	str	r1, [r3, #0]
 8005004:	e002      	b.n	800500c <_printf_i+0x19c>
 8005006:	066a      	lsls	r2, r5, #25
 8005008:	d5fb      	bpl.n	8005002 <_printf_i+0x192>
 800500a:	8019      	strh	r1, [r3, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	4665      	mov	r5, ip
 8005012:	e7b9      	b.n	8004f88 <_printf_i+0x118>
 8005014:	6813      	ldr	r3, [r2, #0]
 8005016:	1d19      	adds	r1, r3, #4
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	681d      	ldr	r5, [r3, #0]
 800501c:	6862      	ldr	r2, [r4, #4]
 800501e:	2100      	movs	r1, #0
 8005020:	4628      	mov	r0, r5
 8005022:	f7fb f915 	bl	8000250 <memchr>
 8005026:	b108      	cbz	r0, 800502c <_printf_i+0x1bc>
 8005028:	1b40      	subs	r0, r0, r5
 800502a:	6060      	str	r0, [r4, #4]
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	2300      	movs	r3, #0
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	e7a7      	b.n	8004f88 <_printf_i+0x118>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	462a      	mov	r2, r5
 800503c:	4639      	mov	r1, r7
 800503e:	4630      	mov	r0, r6
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d0aa      	beq.n	8004f9c <_printf_i+0x12c>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	079b      	lsls	r3, r3, #30
 800504a:	d413      	bmi.n	8005074 <_printf_i+0x204>
 800504c:	68e0      	ldr	r0, [r4, #12]
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	4298      	cmp	r0, r3
 8005052:	bfb8      	it	lt
 8005054:	4618      	movlt	r0, r3
 8005056:	e7a3      	b.n	8004fa0 <_printf_i+0x130>
 8005058:	2301      	movs	r3, #1
 800505a:	464a      	mov	r2, r9
 800505c:	4639      	mov	r1, r7
 800505e:	4630      	mov	r0, r6
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d09a      	beq.n	8004f9c <_printf_i+0x12c>
 8005066:	3501      	adds	r5, #1
 8005068:	68e3      	ldr	r3, [r4, #12]
 800506a:	9a03      	ldr	r2, [sp, #12]
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	42ab      	cmp	r3, r5
 8005070:	dcf2      	bgt.n	8005058 <_printf_i+0x1e8>
 8005072:	e7eb      	b.n	800504c <_printf_i+0x1dc>
 8005074:	2500      	movs	r5, #0
 8005076:	f104 0919 	add.w	r9, r4, #25
 800507a:	e7f5      	b.n	8005068 <_printf_i+0x1f8>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ac      	bne.n	8004fda <_printf_i+0x16a>
 8005080:	7803      	ldrb	r3, [r0, #0]
 8005082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508a:	e76c      	b.n	8004f66 <_printf_i+0xf6>
 800508c:	080052fd 	.word	0x080052fd
 8005090:	0800530e 	.word	0x0800530e

08005094 <memcpy>:
 8005094:	b510      	push	{r4, lr}
 8005096:	1e43      	subs	r3, r0, #1
 8005098:	440a      	add	r2, r1
 800509a:	4291      	cmp	r1, r2
 800509c:	d100      	bne.n	80050a0 <memcpy+0xc>
 800509e:	bd10      	pop	{r4, pc}
 80050a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a8:	e7f7      	b.n	800509a <memcpy+0x6>

080050aa <memmove>:
 80050aa:	4288      	cmp	r0, r1
 80050ac:	b510      	push	{r4, lr}
 80050ae:	eb01 0302 	add.w	r3, r1, r2
 80050b2:	d807      	bhi.n	80050c4 <memmove+0x1a>
 80050b4:	1e42      	subs	r2, r0, #1
 80050b6:	4299      	cmp	r1, r3
 80050b8:	d00a      	beq.n	80050d0 <memmove+0x26>
 80050ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80050c2:	e7f8      	b.n	80050b6 <memmove+0xc>
 80050c4:	4283      	cmp	r3, r0
 80050c6:	d9f5      	bls.n	80050b4 <memmove+0xa>
 80050c8:	1881      	adds	r1, r0, r2
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	42d3      	cmn	r3, r2
 80050ce:	d100      	bne.n	80050d2 <memmove+0x28>
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80050da:	e7f7      	b.n	80050cc <memmove+0x22>

080050dc <_free_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4605      	mov	r5, r0
 80050e0:	2900      	cmp	r1, #0
 80050e2:	d045      	beq.n	8005170 <_free_r+0x94>
 80050e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e8:	1f0c      	subs	r4, r1, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bfb8      	it	lt
 80050ee:	18e4      	addlt	r4, r4, r3
 80050f0:	f000 f8d2 	bl	8005298 <__malloc_lock>
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <_free_r+0x98>)
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	4610      	mov	r0, r2
 80050fa:	b933      	cbnz	r3, 800510a <_free_r+0x2e>
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6014      	str	r4, [r2, #0]
 8005100:	4628      	mov	r0, r5
 8005102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005106:	f000 b8c8 	b.w	800529a <__malloc_unlock>
 800510a:	42a3      	cmp	r3, r4
 800510c:	d90c      	bls.n	8005128 <_free_r+0x4c>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	1862      	adds	r2, r4, r1
 8005112:	4293      	cmp	r3, r2
 8005114:	bf04      	itt	eq
 8005116:	681a      	ldreq	r2, [r3, #0]
 8005118:	685b      	ldreq	r3, [r3, #4]
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	bf04      	itt	eq
 800511e:	1852      	addeq	r2, r2, r1
 8005120:	6022      	streq	r2, [r4, #0]
 8005122:	6004      	str	r4, [r0, #0]
 8005124:	e7ec      	b.n	8005100 <_free_r+0x24>
 8005126:	4613      	mov	r3, r2
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	b10a      	cbz	r2, 8005130 <_free_r+0x54>
 800512c:	42a2      	cmp	r2, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x4a>
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	1858      	adds	r0, r3, r1
 8005134:	42a0      	cmp	r0, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x74>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	4401      	add	r1, r0
 800513c:	1858      	adds	r0, r3, r1
 800513e:	4282      	cmp	r2, r0
 8005140:	6019      	str	r1, [r3, #0]
 8005142:	d1dd      	bne.n	8005100 <_free_r+0x24>
 8005144:	6810      	ldr	r0, [r2, #0]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	4401      	add	r1, r0
 800514c:	6019      	str	r1, [r3, #0]
 800514e:	e7d7      	b.n	8005100 <_free_r+0x24>
 8005150:	d902      	bls.n	8005158 <_free_r+0x7c>
 8005152:	230c      	movs	r3, #12
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	e7d3      	b.n	8005100 <_free_r+0x24>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	1821      	adds	r1, r4, r0
 800515c:	428a      	cmp	r2, r1
 800515e:	bf04      	itt	eq
 8005160:	6811      	ldreq	r1, [r2, #0]
 8005162:	6852      	ldreq	r2, [r2, #4]
 8005164:	6062      	str	r2, [r4, #4]
 8005166:	bf04      	itt	eq
 8005168:	1809      	addeq	r1, r1, r0
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	605c      	str	r4, [r3, #4]
 800516e:	e7c7      	b.n	8005100 <_free_r+0x24>
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	20000090 	.word	0x20000090

08005178 <_malloc_r>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	1ccd      	adds	r5, r1, #3
 800517c:	f025 0503 	bic.w	r5, r5, #3
 8005180:	3508      	adds	r5, #8
 8005182:	2d0c      	cmp	r5, #12
 8005184:	bf38      	it	cc
 8005186:	250c      	movcc	r5, #12
 8005188:	2d00      	cmp	r5, #0
 800518a:	4606      	mov	r6, r0
 800518c:	db01      	blt.n	8005192 <_malloc_r+0x1a>
 800518e:	42a9      	cmp	r1, r5
 8005190:	d903      	bls.n	800519a <_malloc_r+0x22>
 8005192:	230c      	movs	r3, #12
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	2000      	movs	r0, #0
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	f000 f87d 	bl	8005298 <__malloc_lock>
 800519e:	4a21      	ldr	r2, [pc, #132]	; (8005224 <_malloc_r+0xac>)
 80051a0:	6814      	ldr	r4, [r2, #0]
 80051a2:	4621      	mov	r1, r4
 80051a4:	b991      	cbnz	r1, 80051cc <_malloc_r+0x54>
 80051a6:	4c20      	ldr	r4, [pc, #128]	; (8005228 <_malloc_r+0xb0>)
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	b91b      	cbnz	r3, 80051b4 <_malloc_r+0x3c>
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 f863 	bl	8005278 <_sbrk_r>
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f85e 	bl	8005278 <_sbrk_r>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d124      	bne.n	800520a <_malloc_r+0x92>
 80051c0:	230c      	movs	r3, #12
 80051c2:	6033      	str	r3, [r6, #0]
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f868 	bl	800529a <__malloc_unlock>
 80051ca:	e7e4      	b.n	8005196 <_malloc_r+0x1e>
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	1b5b      	subs	r3, r3, r5
 80051d0:	d418      	bmi.n	8005204 <_malloc_r+0x8c>
 80051d2:	2b0b      	cmp	r3, #11
 80051d4:	d90f      	bls.n	80051f6 <_malloc_r+0x7e>
 80051d6:	600b      	str	r3, [r1, #0]
 80051d8:	50cd      	str	r5, [r1, r3]
 80051da:	18cc      	adds	r4, r1, r3
 80051dc:	4630      	mov	r0, r6
 80051de:	f000 f85c 	bl	800529a <__malloc_unlock>
 80051e2:	f104 000b 	add.w	r0, r4, #11
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	f020 0007 	bic.w	r0, r0, #7
 80051ec:	1ac3      	subs	r3, r0, r3
 80051ee:	d0d3      	beq.n	8005198 <_malloc_r+0x20>
 80051f0:	425a      	negs	r2, r3
 80051f2:	50e2      	str	r2, [r4, r3]
 80051f4:	e7d0      	b.n	8005198 <_malloc_r+0x20>
 80051f6:	428c      	cmp	r4, r1
 80051f8:	684b      	ldr	r3, [r1, #4]
 80051fa:	bf16      	itet	ne
 80051fc:	6063      	strne	r3, [r4, #4]
 80051fe:	6013      	streq	r3, [r2, #0]
 8005200:	460c      	movne	r4, r1
 8005202:	e7eb      	b.n	80051dc <_malloc_r+0x64>
 8005204:	460c      	mov	r4, r1
 8005206:	6849      	ldr	r1, [r1, #4]
 8005208:	e7cc      	b.n	80051a4 <_malloc_r+0x2c>
 800520a:	1cc4      	adds	r4, r0, #3
 800520c:	f024 0403 	bic.w	r4, r4, #3
 8005210:	42a0      	cmp	r0, r4
 8005212:	d005      	beq.n	8005220 <_malloc_r+0xa8>
 8005214:	1a21      	subs	r1, r4, r0
 8005216:	4630      	mov	r0, r6
 8005218:	f000 f82e 	bl	8005278 <_sbrk_r>
 800521c:	3001      	adds	r0, #1
 800521e:	d0cf      	beq.n	80051c0 <_malloc_r+0x48>
 8005220:	6025      	str	r5, [r4, #0]
 8005222:	e7db      	b.n	80051dc <_malloc_r+0x64>
 8005224:	20000090 	.word	0x20000090
 8005228:	20000094 	.word	0x20000094

0800522c <_realloc_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	4607      	mov	r7, r0
 8005230:	4614      	mov	r4, r2
 8005232:	460e      	mov	r6, r1
 8005234:	b921      	cbnz	r1, 8005240 <_realloc_r+0x14>
 8005236:	4611      	mov	r1, r2
 8005238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800523c:	f7ff bf9c 	b.w	8005178 <_malloc_r>
 8005240:	b922      	cbnz	r2, 800524c <_realloc_r+0x20>
 8005242:	f7ff ff4b 	bl	80050dc <_free_r>
 8005246:	4625      	mov	r5, r4
 8005248:	4628      	mov	r0, r5
 800524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524c:	f000 f826 	bl	800529c <_malloc_usable_size_r>
 8005250:	42a0      	cmp	r0, r4
 8005252:	d20f      	bcs.n	8005274 <_realloc_r+0x48>
 8005254:	4621      	mov	r1, r4
 8005256:	4638      	mov	r0, r7
 8005258:	f7ff ff8e 	bl	8005178 <_malloc_r>
 800525c:	4605      	mov	r5, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d0f2      	beq.n	8005248 <_realloc_r+0x1c>
 8005262:	4631      	mov	r1, r6
 8005264:	4622      	mov	r2, r4
 8005266:	f7ff ff15 	bl	8005094 <memcpy>
 800526a:	4631      	mov	r1, r6
 800526c:	4638      	mov	r0, r7
 800526e:	f7ff ff35 	bl	80050dc <_free_r>
 8005272:	e7e9      	b.n	8005248 <_realloc_r+0x1c>
 8005274:	4635      	mov	r5, r6
 8005276:	e7e7      	b.n	8005248 <_realloc_r+0x1c>

08005278 <_sbrk_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4c06      	ldr	r4, [pc, #24]	; (8005294 <_sbrk_r+0x1c>)
 800527c:	2300      	movs	r3, #0
 800527e:	4605      	mov	r5, r0
 8005280:	4608      	mov	r0, r1
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	f7fb fd10 	bl	8000ca8 <_sbrk>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_sbrk_r+0x1a>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	b103      	cbz	r3, 8005292 <_sbrk_r+0x1a>
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200005b4 	.word	0x200005b4

08005298 <__malloc_lock>:
 8005298:	4770      	bx	lr

0800529a <__malloc_unlock>:
 800529a:	4770      	bx	lr

0800529c <_malloc_usable_size_r>:
 800529c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a0:	1f18      	subs	r0, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bfbc      	itt	lt
 80052a6:	580b      	ldrlt	r3, [r1, r0]
 80052a8:	18c0      	addlt	r0, r0, r3
 80052aa:	4770      	bx	lr

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
